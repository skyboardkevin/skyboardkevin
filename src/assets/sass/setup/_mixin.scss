// Add prefex for cross browser support
@mixin prefix($property, $value, $prefixes: webkit ms moz o) {
  @each $prefix in $prefixes {
    #{'-' + $prefix + '-' + $property}: $value;
  }
  #{$property}: $value;
}

// Add prefex auto to some need css function
@mixin transition($value: all 0.4s ease 0s){
	@include prefix(transition, $value);
}
@mixin transform($value){
  @include prefix(transform, $value);
}
@mixin transform-origin($value){
  @include prefix(transform-origin, $value);
}
@mixin animation($value){
	@include prefix(animation, $value);
}
@mixin perspective($value){
	@include prefix(perspective, $value);
}
@mixin backface-visibility($value){
	@include prefix(backface-visibility, $value);
}


@function calculateRem($size) {
  $remSize: $size / 16;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: #{$size}px;
  font-size: calculateRem($size);
}

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

// centerise an element
@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    @include transform(translateX(-50%) translateY(-50%));
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    @include transform(translateX(-50%));
  }
  @else if $xy == y {
    top: 50%;
    bottom: auto;
    @include transform(translateY(-50%));
  }
}

@mixin modifiers($map, $attribute, $prefix: '-', $separator: '-', $base: 'base') {
  @each $key, $value in $map {
    &#{if($key != $base, #{$prefix}#{$key}, '')} {
      @if type-of($value) == 'map' {
        @include modifiers($value, $attribute, $separator);
      }
      @else {
        #{$attribute}: $value !important;
      }
    }
  }
}


// Media Query and breakpoints   
$MIN_XS:      576px;
$MIN_SM:      768px;
$MIN_MD:      992px;
$MIN_LG:      1200px;
$MIN_XL:      1500px;

$MAX_XS:      575.98px;
$MAX_SM:      767.98px;
$MAX_MD:      991.98px;
$MAX_LG:      1199.98px;
$MAX_XL:      1499.98px;

// media queries
@mixin media-min($canvas) {
  @if $canvas == XS {
   @media only screen and (min-width: $MIN_XS) { @content; } 
  }
  @else if $canvas == SM {
   @media only screen and (min-width: $MIN_SM) { @content; } 
  }
  @else if $canvas == MD {
   @media only screen and (min-width: $MIN_MD) { @content; } 
  }
  @else if $canvas == LG {
   @media only screen and (min-width: $MIN_LG) { @content; } 
  }
  @else if $canvas == XL {
   @media only screen and (min-width: $MIN_XL) { @content; } 
  }
}
@mixin media-max($canvas) {
  @if $canvas == XS {
   @media only screen and (max-width: $MAX_XS) { @content; } 
  }
  @else if $canvas == SM {
   @media only screen and (max-width: $MAX_SM) { @content; } 
  }
  @else if $canvas == MD {
   @media only screen and (max-width: $MAX_MD) { @content; } 
  }
  @else if $canvas == LG {
   @media only screen and (max-width: $MAX_LG) { @content; } 
  }
  @else if $canvas == XL {
   @media only screen and (max-width: $MAX_XL) { @content; } 
  }
}

// keyframes mixin
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content; 
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  } 
}

// st clearfix
@mixin clearfix() {
  &::after {
    content: "";
    display: block;
    clear: both;
  }
}

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}

// st btn styles
@mixin btn-styles(
	$color: $color-white, 
	$bgcolor: $color-gigas, 
	$hover-color: $color-white, 
	$hover-bgc: $color-aqua, 
	$border-width: null, 
	$border-color: null, 
	$hover-border-color: null, 
	$transition: all 0.4s ease 0s,
	$border-style: solid
	) 
{
  color: $color;
  background-color: $bgc;
	@if ($border-width) {
		border-width: $border-width;
	}
	@if ($border-color) {
		border-color: $border-color;
	} 
	@if ($border-style) {
		border-style: $border-style;
	} 
  @include transition($transition);

  &:hover,
  &:focus,
  &:active {
    background-color: $hover-bgc;
    @if ($hover-border-color) {
			border-color: $hover-border-color;
		}
    color: $hover-color;
  }

}

// st placeholder color
@mixin placeholder-color($color) {
  &::-webkit-input-placeholder {
    color: $color;
  }
  &::-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
  &:-moz-placeholder {
    color: $color;
  }
}

// list style
@mixin st_ul($margin: 0,$padding: 0,$list_style:none){
  margin: $margin;
  padding: $padding;
  list-style: $list_style;
}
@mixin st_slider_icon($bgc: transparent,$color: #fff,$font_size: 1em,$height: 44px,$width: 44px,$display: flex,$justify_content:center,$align_item: center,$text_align: center,$border:  2px solid #CCC2FF,$opacity: .4,$position: absolute,$left: 120px,$top: 35%,$transform:translateY(-50%)){
  background-color: $bgc;
  color: $color;
  font-size: $font_size;
  height: $height;
  width: $width;
  display: flex;
  justify-content:$justify_content;
  align-items: $align_item;
  text-align: $text_align;
  border: $border;
  position: $position;
  opacity: $opacity;
  left: $left;
  top: $top;
  transform:$transform;
}
